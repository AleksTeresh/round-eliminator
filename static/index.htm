<!DOCTYPE html>
<html lang="en">
<head><title>Sim</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="bootstrap.min.css">
    <link rel="stylesheet" href="vis.min.css">
    <script src="jquery-3.3.1.min.js"></script>
    <script src="popper.min.js"></script>
    <script src="bootstrap.min.js"></script>
    <script src="vis.min.js"></script>
    <script src="api.js"></script>
    <style>
        .panel-resizable {
            resize: both;
            overflow: auto;
            height: 90%;
        }
        .labelborder {
            border: solid 1px black;
        }
    </style>
    <script>
        let ctr = 0;

        $(document).ready(function(){

            $( "#btn0" ).click(function(ev) {
                on_input_click();
            });

            $( "#btnclear" ).click(function(ev) {
                $( "#steps" ).html("");
            });

        });

        function merge(v) {
            return v.join("");
        }

        function make_table(v,f){
            let s = '<table class="table">';
            for (let line of v) {
                s += '<tr>';
                for (let elem of line) {
                    s += '<td>'+f(elem)+'</td>';
                }
                s += '</tr>';
            }
            s += '</table>';
            return s;
        }

        function generate_html_for_problem(problem,id) {
            let blob = problem[0];
            let x = problem[1];
            let cur_to_old = {};

            let labels = Array.from(new Set(x.left.concat(x.right).flat(Infinity)));
            labels.sort();

            let forall = make_table(x.left,merge);
            let exists = make_table(x.right,merge);

            let nodes = [...new Set([].concat.apply([], x.diagram))];
            let visnodes = [];
            for (let node of nodes ) {
                visnodes.push({id: node, label: node});
            }
            let visnodes2 = new vis.DataSet(visnodes);
            let visedges = [];
            for (let edge of x.diagram ) {
                visedges.push({ from : edge[0], to : edge[1], arrows: 'to'});
            }
            let visedges2 = new vis.DataSet(visedges);
            let visdata = {
                nodes: visnodes2,
                edges: visedges2
            };

            let diagram = $('<div class="panel-resizable" id="'+id+'"></div>');
            diagram.ready(function(ev){
                let container = document.getElementById(id);
                let network = new vis.Network(document.getElementById(id), visdata, {});
            });

            let next = $('<button type="button" class="btn btn-primary">Speedup</button>');
            next.click(function(ev) {
                api_speedup(blob, append_new_problem );
            });

            let edit = $('<button type="button" class="btn btn-primary">Edit</button>');
            edit.click(function(ev) {
                let tleft = x.left.map(v => v.map(t => t.join("")).join(" ")).join("\n");
                let tright = x.right.map(v => v.map(t => t.join("")).join(" ")).join("\n");
                console.log(tleft);
                console.log(tright);
                $('#inf1').val(tleft);
                $('#inf2').val(tright);
            });


            let simpls = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            api_possible_simplifications(blob,function(v){
                for (let simpl of v ){
                    let sblob = simpl[0];
                    let sstr = simpl[1];
                    let bstr = sstr[0] + "→" + sstr[1];
                    var bsimpl = $('<button type="button" class="btn btn-primary">'+bstr+'</button>');
                    bsimpl.click(function(ev) {
                        api_simplify(blob, sblob, append_new_problem);
                    });
                    simpls.append(bsimpl);
                }
            });

            let hard = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            for(let label of labels){
                let check = $('<div class="custom-control custom-switch"><label><input type="checkbox" class="custom-control-input"><p class="form-control-static custom-control-label">'+label+'</p></label></div>');
                hard.append(check);
            }
            let hardbtn = $('<button type="button" class="btn btn-primary">Harden</button>');
            hardbtn.click(function(ev) {
                let checks = Array.from($('input[type=checkbox]',hard));
                let entries = Array.from(checks.entries());
                let selected = entries.filter(([i,x]) => x.checked).map(([i,x]) => i);
                let selectedlabels = selected.map(i => labels[i]);
                api_harden(blob,selectedlabels,function(x){
                    if( x != null ){
                        append_new_problem(x);
                    } else {
                        alert("All labels would disappear...");
                    }
                });
                
            });
            hard.append(hardbtn);

            let divautolb = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            let maxiterlb = $('<input/>').attr({ type: 'number', value: '30' });
            let maxlabelslb = $('<input/>').attr({ type: 'number', value: '5' });
            divautolb.append(maxiterlb);
            divautolb.append(maxlabelslb);

            let autolb = $('<button type="button" class="btn btn-primary">Automatic Lower Bound</button>');
            autolb.click(function(ev) {
                let divresult = $('<div class="container-fluid m-0 p-0"/>').append("Computing Lower Bound...");
                let spinner = $('<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>');
                let onresult = function (result) {
                    let toshow = $('<div/>')
                    toshow.append(spinner);

                    let rounds = result.filter(step => step[1] == "Speedup" ).length;
                    let nt = result[result.length-1][2].is_trivial;
                    if ( !nt )rounds += 1;
                    toshow.append($('<div class="col-md rounded bg-secondary text-white m-2 p-2"/>').append("Lower bound of " + rounds + " rounds."));


                    for( let step of result ) {
                        what = step[1];
                        if( what == "Initial" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Initial Problem."));
                        else if( what == "Speedup" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed one step of Speedup."));
                        else if( what.Simplified != null ){
                            for(let simpl of what.Simplified ){
                                let ssimpl = simpl[0] + "→" + simpl[1];
                                toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed simplification "+ssimpl));
                            }
                        }
                        problem = [step[0],step[2]];
                        append_new_problem_to(problem,toshow);
                    }
                    divresult.html(toshow);
                }
                let onend = function () {
                    spinner.remove();
                }
                append_generic(divresult);
                api_autolb(blob, parseInt(maxiterlb.val(),10), parseInt(maxlabelslb.val(),10) , onresult, onend);
            });
            divautolb.append(autolb);

            let divautoub = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            let maxiterub = $('<input/>').attr({ type: 'number', value: '5' });
            let maxlabelsub = $('<input/>').attr({ type: 'number', value: '4' });
            divautoub.append(maxiterub);
            divautoub.append(maxlabelsub);
            let autoub = $('<button type="button" class="btn btn-primary">Automatic Upper Bound</button>');
            autoub.click(function(ev) {
                let divresult = $('<div class="container-fluid m-0 p-0"/>').append("Computing Upper Bound...");
                let spinner = $('<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>');
                let onresult = function (result) {
                    let toshow = $('<div/>');
                    toshow.append(spinner);

                    let rounds = result.filter(step => step[1] == "Speedup" ).length;
                    let nt = result[result.length-1][2].is_trivial;
                    if ( !nt )rounds += 1;
                    toshow.append($('<div class="col-md rounded bg-secondary text-white m-2 p-2"/>').append("Upper bound of " + rounds + " rounds."));

                    for(let step of result ) {
                        what = step[1];
                        if( what == "Initial" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Initial Problem."));
                        else if( what == "Speedup" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed one step of Speedup."));
                        else if( what.Simplified != null ){
                            let s = merge(what.Simplified);
                            toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Kept only labels "+s));
                        }
                        problem = [step[0],step[2]];
                        append_new_problem_to(problem,toshow);
                    }
                    divresult.html(toshow);
                }
                let onend = function () {
                    spinner.remove();
                }
                append_generic(divresult);
                api_autoub(blob, parseInt(maxiterub.val(),10), parseInt(maxlabelsub.val(),10) , onresult, onend);
            });
            divautoub.append(autoub);

            let trivial = "The problem is " + (x.is_trivial? "" : "NOT ") + "zero rounds solvable.";
            let col0 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append(trivial);

            let col1 = null;
            let col2 = null;
            let col4 = null;
            if( x.mapping != null ){
                let s = '<table class="table">';
                    for (let line of x.mapping) {
                        let old = merge(line[0]);
                        let cur = line[1];
                        s += '<tr><td><span class="rounded m-1 labelborder">'+old+'</span></td><td>'+cur+'</td></tr>';
                        cur_to_old[cur] = old;
                    }
                s += '</table>';
                renaming = s;
                let oldmap = function (v){
                    return merge(v.map(function(x){ return '<span class="rounded m-1 labelborder">'+cur_to_old[x]+'</span><br/>'; }));
                };
                let forall_old = make_table(x.left, oldmap);
                let exists_old = make_table(x.right, oldmap);
                col1 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Active</h4><h6><small>Any choice satisfies previous Passive</small></h6>' +forall_old);
                col2 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Passive</h4><h6><small>Exists choice satisfying previous Active</small></h6>' +exists_old);
                col4 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Renaming</h4><h6><small>Old and new labels</small></h6>' +renaming);
            }
            
            let col3 = $('<div class="col-md rounded m-2 p-2"/>').append(diagram);
            let col5 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Active (Relabeled)</h4><h6><small>Any choice satisfies previous Passive</small></h6>' +forall);
            let col6 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Passive (Relabeled)</h4><h6><small>Exists choice satisfying previous Active</small></h6>' +exists);
            let col7 = $('<div class="col-sm rounded m-2 p-2 text-right"/>').append(next);

            let row = x.mapping == null ? $('<div class="row rounded bg-light mt-5 p-5"/>').append(col0,$('<div class="w-100"/>'),$('<div class="w-100"/>'),col5,col6,col3,$('<div class="w-100"/>'),col7,simpls,hard,divautolb,divautoub,edit) :
                                          $('<div class="row rounded bg-light mt-5 p-5"/>').append(col0,$('<div class="w-100"/>'),col1,col2,col4,$('<div class="w-100"/>'),col5,col6,col3,$('<div class="w-100"/>'),col7,simpls,hard,divautolb,divautoub,edit);

            return $('<div/>').append(row);
        }


        function append_generic(x) {
            $("#steps").append(x);
        }

        function append_new_problem_to(x,to) {
            ctr += 1;
            let html = generate_html_for_problem(x,"canvas"+ctr);
            to.append(html);
        }

        function append_new_problem(x) {
            append_new_problem_to(x,$("#steps"))
        }


        function on_input_click() {
            let f1 = $('#inf1').val();
            let f2 = $('#inf2').val();
            let text = "";
            for(let line of f1.split("\n")) {
                if( line != "" ){
                    text += line + "\n";
                }
            }
            let a = text;
            text = "";
            for(let line of f2.split("\n")) {
                if( line != "" ){
                    text += line + "\n";
                }
            }
            let b = text;
            api_new_problem(a,b, append_new_problem);
        }
    </script>
</head><body>

<div class="container-fluid m-0 p-0">
    <div class="container-fluid rounded bg-light m-0 p-5">
        <div class="row">
            <div class="col-md">
                <h4>Active</h4>
                <textarea rows="4" cols="30" class="form-control" id="inf1">
M U U U
P P P P
</textarea>
            </div>
            <div class="col-md">
                <h4>Passive</h4>
                <textarea rows="4" cols="30" class="form-control" id="inf2">
M UP UP UP
U U U U</textarea>
            </div>
            <div class="col-sm mt-auto text-right">
                <button type="button" class="btn btn-primary" id="btn0">Start</button>
                <button type="button" class="btn btn-primary" id="btnclear">Clear</button>
            </div>
        </div>
    </div>

    <div class="container-fluid m-0 p-0" id="steps"/>
</div>

</body></html>
