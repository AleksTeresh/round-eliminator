<!DOCTYPE html>
<html lang="en">
<head><title>Sim</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="bootstrap.min.css">
    <link rel="stylesheet" href="vis.min.css">
    <script src="jquery-3.3.1.min.js"></script>
    <script src="popper.min.js"></script>
    <script src="bootstrap.min.js"></script>
    <script src="vis.min.js"></script>
    <script src="api.js"></script>
    <style>
        .panel-resizable {
            resize: both;
            overflow: auto;
            height: 90%;
        }
        .labelborder {
            border: solid 1px black;
        }
    </style>
    <script>
        var ctr = 0;

        $(document).ready(function(){

            $( "#btn0" ).click(function(ev) {
                on_input_click();
            });

            $( "#btnclear" ).click(function(ev) {
                $( "#steps" ).html("");
            });

        });

        function merge(v) {
            return v.join("");
        }

        function make_table(v,f){
            var s = '<table class="table">';
            for (line of v) {
                s += '<tr>';
                for (elem of line) {
                    s += '<td>'+f(elem)+'</td>';
                }
                s += '</tr>';
            }
            s += '</table>';
            return s;
        }

        function generate_html_for_problem(problem,id) {
            var blob = problem[0];
            var x = problem[1];
            var cur_to_old = {};

            var forall = make_table(x.left,merge);
            var exists = make_table(x.right,merge);

            var nodes = [...new Set([].concat.apply([], x.diagram))];
            var visnodes = [];
            for ( node of nodes ) {
                visnodes.push({id: node, label: node});
            }
            var visnodes = new vis.DataSet(visnodes);
            var visedges = [];
            for (edge of x.diagram ) {
                visedges.push({ from : edge[0], to : edge[1], arrows: 'to'});
            }
            var visedges = new vis.DataSet(visedges);
            var visdata = {
                nodes: visnodes,
                edges: visedges
            };

            var diagram = $('<div class="panel-resizable" id="'+id+'"></div>');
            diagram.ready(function(ev){
                var container = document.getElementById(id);
                var network = new vis.Network(document.getElementById(id), visdata, {});
            });

            var next = $('<button type="button" class="btn btn-primary">Speedup</button>');
            next.click(function(ev) {
                api_speedup(blob, append_new_problem );
            });

            var simpls = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            api_possible_simplifications(blob,function(v){
                for ( simpl of v ){
                    var sblob = simpl[0];
                    var sstr = simpl[1];
                    var bstr = sstr[0] + "→" + sstr[1];
                    var bsimpl = $('<button type="button" class="btn btn-primary">'+ bstr + '</button>');
                    bsimpl.click(function(ev) {
                        api_simplify(blob, sblob, append_new_problem);
                    });
                    simpls.append(bsimpl);
                }
            });

            var divautolb = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            var maxiterlb = $('<input/>').attr({ type: 'number', value: '30' });
            var maxlabelslb = $('<input/>').attr({ type: 'number', value: '5' });
            divautolb.append(maxiterlb);
            divautolb.append(maxlabelslb);

            var autolb = $('<button type="button" class="btn btn-primary">Automatic Lower Bound</button>');
            autolb.click(function(ev) {
                var divresult = $('<div class="container-fluid m-0 p-0"/>').append("Computing Lower Bound...");
                var spinner = $('<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>');
                var onresult = function (result) {
                    var toshow = $('<div/>')
                    toshow.append(spinner);

                    var rounds = result.filter(step => step[1] == "Speedup" ).length;
                    var nt = result[result.length-1][2].is_trivial;
                    if ( !nt )rounds += 1;
                    toshow.append($('<div class="col-md rounded bg-secondary text-white m-2 p-2"/>').append("Lower bound of " + rounds + " rounds."));


                    for( step of result ) {
                        what = step[1];
                        if( what == "Initial" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Initial Problem."));
                        else if( what == "Speedup" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed one step of Speedup."));
                        else if( what.Simplified != null ){
                            for( simpl of what.Simplified ){
                                var ssimpl = simpl[0] + "→" + simpl[1];
                                toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed simplification "+ssimpl));
                            }
                        }
                        problem = [step[0],step[2]];
                        append_new_problem_to(problem,toshow);
                    }
                    divresult.html(toshow);
                }
                var onend = function () {
                    spinner.remove();
                }
                append_generic(divresult);
                api_autolb(blob, parseInt(maxiterlb.val(),10), parseInt(maxlabelslb.val(),10) , onresult, onend);
            });
            divautolb.append(autolb);

            var divautoub = $('<div class="col-md rounded bg-white m-2 p-2"/>');
            var maxiterub = $('<input/>').attr({ type: 'number', value: '5' });
            var maxlabelsub = $('<input/>').attr({ type: 'number', value: '4' });
            divautoub.append(maxiterub);
            divautoub.append(maxlabelsub);
            var autoub = $('<button type="button" class="btn btn-primary">Automatic Upper Bound</button>');
            autoub.click(function(ev) {
                var divresult = $('<div class="container-fluid m-0 p-0"/>').append("Computing Upper Bound...");
                var spinner = $('<div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>');
                var onresult = function (result) {
                    var toshow = $('<div/>');
                    toshow.append(spinner);

                    var rounds = result.filter(step => step[1] == "Speedup" ).length;
                    var nt = result[result.length-1][2].is_trivial;
                    if ( !nt )rounds += 1;
                    toshow.append($('<div class="col-md rounded bg-secondary text-white m-2 p-2"/>').append("Upper bound of " + rounds + " rounds."));

                    for( step of result ) {
                        what = step[1];
                        if( what == "Initial" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Initial Problem."));
                        else if( what == "Speedup" )toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Performed one step of Speedup."));
                        else if( what.Simplified != null ){
                            var s = merge(what.Simplified);
                            toshow.append($('<div class="col-md rounded bg-info text-white m-2 p-2"/>').append("Kept only labels "+s));
                        }
                        problem = [step[0],step[2]];
                        append_new_problem_to(problem,toshow);
                    }
                    divresult.html(toshow);
                }
                var onend = function () {
                    spinner.remove();
                }
                append_generic(divresult);
                api_autoub(blob, parseInt(maxiterub.val(),10), parseInt(maxlabelsub.val(),10) , onresult, onend);
            });
            divautoub.append(autoub);

            var trivial = "The problem is " + (x.is_trivial? "" : "NOT ") + "zero rounds solvable.";
            var col0 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append(trivial);

            var col1 = null;
            var col2 = null;
            var col4 = null;
            if( x.mapping != null ){
                var s = '<table class="table">';
                    for (line of x.mapping) {
                        var old = merge(line[0]);
                        var cur = line[1];
                        s += '<tr><td><span class="rounded m-1 labelborder">'+old+'</span></td><td>'+cur+'</td></tr>';
                        cur_to_old[cur] = old;
                    }
                s += '</table>';
                renaming = s;
                let oldmap = function (v){
                    return merge(v.map(function(x){ return '<span class="rounded m-1 labelborder">'+cur_to_old[x]+'</span><br/>'; }));
                };
                var forall_old = make_table(x.left, oldmap);
                var exists_old = make_table(x.right, oldmap);
                col1 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Active</h4><h6><small>Any choice satisfies previous Passive</small></h6>' +forall_old);
                col2 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Passive</h4><h6><small>Exists choice satisfying previous Active</small></h6>' +exists_old);
                col4 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Renaming</h4><h6><small>Old and new labels</small></h6>' +renaming);
            }
            
            var col3 = $('<div class="col-md rounded m-2 p-2"/>').append(diagram);
            var col5 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Active (Relabeled)</h4><h6><small>Any choice satisfies previous Passive</small></h6>' +forall);
            var col6 = $('<div class="col-md rounded bg-white m-2 p-2"/>').append('<h4>Passive (Relabeled)</h4><h6><small>Exists choice satisfying previous Active</small></h6>' +exists);
            var col7 = $('<div class="col-sm rounded m-2 p-2 text-right"/>').append(next);

            var row = x.mapping == null ? $('<div class="row rounded bg-light mt-5 p-5"/>').append(col0,$('<div class="w-100"/>'),$('<div class="w-100"/>'),col5,col6,col3,$('<div class="w-100"/>'),col7,simpls,divautolb,divautoub) :
                                          $('<div class="row rounded bg-light mt-5 p-5"/>').append(col0,$('<div class="w-100"/>'),col1,col2,col4,$('<div class="w-100"/>'),col5,col6,col3,$('<div class="w-100"/>'),col7,simpls,divautolb,divautoub);

            return $('<div/>').append(row);
        }


        function append_generic(x) {
            $("#steps").append(x);
        }

        function append_new_problem_to(x,to) {
            ctr += 1;
            var html = generate_html_for_problem(x,"canvas"+ctr);
            to.append(html);
        }

        function append_new_problem(x) {
            append_new_problem_to(x,$("#steps"))
        }


        function on_input_click() {
            var f1 = $('#inf1').val();
            var f2 = $('#inf2').val();
            var text = "";
            for(line of f1.split("\n")) {
                if( line != "" ){
                    text += line + "\n";
                }
            }
            var a = text;
            text = "";
            for(line of f2.split("\n")) {
                if( line != "" ){
                    text += line + "\n";
                }
            }
            var b = text;
            api_new_problem(a,b, append_new_problem);
        }
    </script>
</head><body>

<div class="container-fluid m-0 p-0">
    <div class="container-fluid rounded bg-light m-0 p-5">
        <div class="row">
            <div class="col-md">
                <h4>Active</h4>
                <textarea rows="4" cols="30" class="form-control" id="inf1">
M U U U
P P P P
</textarea>
            </div>
            <div class="col-md">
                <h4>Passive</h4>
                <textarea rows="4" cols="30" class="form-control" id="inf2">
M UP UP UP
U U U U</textarea>
            </div>
            <div class="col-sm mt-auto text-right">
                <button type="button" class="btn btn-primary" id="btn0">Start</button>
                <button type="button" class="btn btn-primary" id="btnclear">Clear</button>
            </div>
        </div>
    </div>

    <div class="container-fluid m-0 p-0" id="steps"/>
</div>

</body></html>
